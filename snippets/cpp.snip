include c.snip

# #include <...>
snippet inc
alias   #inc, #include
    #include <${1:iostream}>
# #include "..."
snippet inc2
alias   #inc2, #include2
    #include "${1}"

snippet template
abbr    template <T>
    template <typename ${1:T}>

snippet class-inline
abbr    class {}
    class ${1:#:name} {
      public:
        $1(${2}) {}
        ~$1() {}
      private:
    };

snippet class-outline
abbr    class {}
    class ${1:#:name} {
      public:
        $1(${2});
        ~$1();
      private:
    };

    $1::$1($2) {
    }

    $1::~$1() {
    }
    ${0:target}

snippet class-without-constructor
abbr    class {}
    class ${1:#:name} {
        ${2}
    };

snippet try
abbr    try catch
    try {
        ${1:TARGET}
    } catch(${2:exception}) {
        ${3}
    }

snippet for size_t
abbr    for(size_t){}
    for (size_t ${1} = 0; $1 < ${2}; $1++) {
        ${0:TARGET}
    }

snippet for int
abbr    for(int){}
    for (int ${1} = 0; $1 < ${2}; $1++) {
        ${0:TARGET}
    }

# range based for ( C++11 feature )
snippet for_CPP11
abbr    for(:){}
    for (auto&& ${1:v} : ${2:container}) {
        ${0:TARGET}
    }

# lambda expression ( C++11 feature )
snippet lambda
abbr    [](){}
    [${1}](${2})${3} { ${4:TARGET} }

# scoped enumeration ( C++11 feature )
snippet enum_scoped
abbr    enum struct{}
    enum struct { ${1:TARGET} }

# static assert ( C++11 feature )
snippet static_assert
abbr    static_assert(,"")
    static_assert(${1}, "${2}");${0}

delete  namespace
snippet namespace
abbr    namespace{}
options head
    namespace ${1:#:name} {
        ${0:TARGET}
    }  // namespace ${1:anonymous}

snippet static_cast
abbr    static_cast<>()
    static_cast<${1}>(${2})${0}

snippet reinterpret_cast
abbr    reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet const_cast
abbr    const_cast<>()
    const_cast<${1}>(${2})${0}

snippet dynamic_cast
abbr    dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet helloworld
abbr    #include<iostream> int main...
    #include <iostream>

    int main(int argc, char const* argv[]) {
        std::cout << "hello, world!" << std::endl;
        return 0;
    }

snippet cout ln (std:)
options head
    std::cout << ${0:TARGET} << std::endl;

snippet using_namespace
alias   using namespace
    using namespace ${1:std};
    ${0}

snippet string
alias   str
    std::string

snippet const_string
alias   str_const
    const std::string&

snippet vector
alias   vec
    std::vector<${1}>${0}

snippet const_vector
alias   vec_const
    const std::vector<${1}>&${0}

snippet array
alias   arr
    std::array<${1}, ${2}>${0}

snippet const_arr
alias   arr_const
    const std::array<${1}, ${2}>&${0}

snippet map
    std::map<${1}, ${2}>${0}

snippet const_map
alias   map_const
    const std::map<${1}, ${2}>&${0}

snippet shared_ptr
alias   ptr_shared
    std::shared_ptr<${1}>${0}

snippet shared_ptr_make
alias   make_shared
    std::make_shared<${1}>(${2});${0}

snippet unique_ptr
alias   ptr_unique
    std::unique_ptr<${1}>${0}

snippet unique_ptr_make
alias   make_unique
    std::make_unique<${1}>(${2});${0}

snippet move
    std::move(${0});

snippet forward
    std::forward<${1}>(${0});

snippet auto
    auto&&${0}
