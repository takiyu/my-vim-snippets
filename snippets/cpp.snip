include c.snip

# #include <...>
snippet inc
alias   #inc, #include
    #include <${1:iostream}>
# #include "..."
snippet inc2
alias   #inc2, #include2
    #include "${1}"

snippet template
abbr    template <T>
    template <typename ${1:T}>

snippet class-inline
abbr    class {}
    class ${1:#:name} {
      public:
        $1(${2}) {}
        ~$1() {}
      private:
    };
    ${0}

snippet class-outline
abbr    class {}
    class ${1:#:name} {
      public:
        $1(${2});
        ~$1();
      private:
    };

    $1::$1($2) {
    }

    $1::~$1() {
    }
    ${0}

snippet class-empty
abbr    class {}
    class ${1:#:name} {
        ${2}
    };

snippet class-full-inline
abbr    class {}
    class ${1:#:name} {
      public:
        $1(${2}) {}
        $1(const $1& lhs) {}
        $1($1&& lhs) {}
        $1& operator=(const $1& lhs) { return *this; }
        $1& operator=($1&& lhs) { return *this; }
        ~$1() {}
      private:
    };${0}

snippet class-full-outline
abbr    class {}
    class ${1:#:name} {
      public:
        $1(${2});
        $1(const $1&);
        $1($1&&);
        $1& operator=(const $1&);
        $1& operator=($1&&);
        ~$1();
      private:
    };

    $1::$1($2) {}

    $1::$1(const $1& lhs) {}

    $1::$1($1&& lhs) {}

    $1& $1::operator=(const $1& lhs) { return *this; }

    $1& $1::operator=($1&& lhs) { return *this; }

    $1::~$1() {}
    ${0}

snippet class-pimpl
abbr    class {}
alias   pimpl
    class ${1:#:name} {
      public:
        $1(${2});
        $1(const $1&);
        $1($1&&);
        $1& operator=(const $1&);
        $1& operator=($1&&);
        ~$1();
      private:
        class Impl;
        std::unique_ptr<Impl> m_impl;
    };

    class $1::Impl {
    public:
        Impl() {}
        Impl(const Impl& lhs) {}
        Impl(Impl&&) = delete;
        Impl& operator=(const Impl& lhs) { return *this; }
        Impl& operator=(Impl&&) = delete;
        ~Impl() {}
    };

    $1::$1($2) : m_impl(std::make_unique<Impl>($2)) {}

    $1::$1(const $1& lhs) : m_impl(std::make_unique<Impl>(*lhs.m_impl)) {}

    $1::$1($1&&) = default;

    $1& $1::operator=(const $1& lhs) {
        *m_impl = *lhs.m_impl;
        return *this;
    }

    $1& $1::operator=($1&&) = default;

    $1::~$1() = default;
    ${0}

snippet try
abbr    try catch
    try {
        ${1:TARGET}
    } catch(${2:exception}) {
        ${3}
    }

# range based for ( C++11 feature )
snippet for-auto
abbr    for(:){}
alias   for-CPP11
    for (auto&& ${1} : ${2}) {
        ${0:TARGET}
    }

# lambda expression ( C++11 feature )
snippet lambda
abbr    [](){}
    [${1}](${2})${3} { ${4:TARGET} }

# scoped enumeration ( C++11 feature )
snippet enum_scoped
abbr    enum class {}
    enum struct { ${1:TARGET} }

# static assert ( C++11 feature )
snippet static_assert
abbr    static_assert(,"")
    static_assert(${1}, "${2}");${0}

delete  namespace
snippet namespace
abbr    namespace{}
options head
    namespace ${1:#:name} {
        ${0:TARGET}
    }  // namespace

snippet static_cast
abbr    static_cast<>()
    static_cast<${1}>(${2})${0}

snippet reinterpret_cast
abbr    reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet const_cast
abbr    const_cast<>()
    const_cast<${1}>(${2})${0}

snippet dynamic_cast
abbr    dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet helloworld
abbr    #include<iostream> int main...
    #include <iostream>

    int main(int argc, char const* argv[]) {
        std::cout << "hello, world!" << std::endl;
        return 0;
    }

snippet cout ln (std:)
options head
    std::cout << ${0:TARGET} << std::endl;

snippet using-namespace
alias   namespace-using
    using namespace ${1:std};
    ${0}

snippet string
    std::string

snippet const_string
    const std::string&

snippet vector
    std::vector<${1}>${0}

snippet const_vector
    const std::vector<${1}>&${0}

snippet array
    std::array<${1}, ${2}>${0}

snippet const_arr
    const std::array<${1}, ${2}>&${0}

snippet map
    std::map<${1}, ${2}>${0}

snippet const_map
    const std::map<${1}, ${2}>&${0}

snippet unordered_map
    std::map<${1}, ${2}>${0}

snippet const_unordered_map
    const std::map<${1}, ${2}>&${0}

snippet set
    std::set<${1}>${0}

snippet const_set
    const std::set<${1}>&${0}

snippet unordered_set
    std::set<${1}>${0}

snippet const_unordered_set
    const std::set<${1}>&${0}

snippet shared_ptr
alias   ptr_shared
    std::shared_ptr<${1}>${0}

snippet make_shared
    std::make_shared<${1}>(${0}

snippet unique_ptr
alias   ptr_unique
    std::unique_ptr<${1}>${0}

snippet make_unique
    std::make_unique<${1}>(${0}

snippet move
    std::move(${0})

snippet forward
    std::forward<${1}>(${0}

snippet auto
    auto&&${0}

snippet make_tuple
    std::make_tuple(${0}

snippet get
    std::get<${1}>(${0}
